version: '3.6'
services:

  mqtt-broker:
    build:
      context: ./mqtt-broker
      dockerfile: Dockerfile
    container_name: mqtt-broker
    ports:
      - 1883:1883
    networks:
      - tracker-net
    healthcheck:
      test: nc -z localhost 1883 || exit -1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10 
  
  
  kafka-mqtt-connector:
    build:
      context: ./kafka_mqtt_source_connector
      dockerfile: Dockerfile
    container_name: kafka-mqtt-connector
    networks:
      - tracker-net
    depends_on:
      mqtt-broker:
        condition: service_healthy
      kafka:
        condition: service_healthy
  
  zookeeper:
    image: zookeeper:3.9.0
    restart: always
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - 2181:2181
    environment:
      ZOO_TICK_TIME: 2000
    networks:
      - tracker-net
  
  kafka:
    build:
      context: ./vehicle-tracker-kafka
      dockerfile: Dockerfile
    container_name: kafka
    ports:
      - '9094:9094'
    networks: 
      - tracker-net
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENERS=INTERNAL://:9092,EXTERNAL_SAME_HOST://:9093,EXTERNAL_DIFFERENT_HOST://:9094
      - KAFKA_ADVERTISED_LISTENERS=INTERNAL://kafka:9092,EXTERNAL_SAME_HOST://localhost:9093,EXTERNAL_DIFFERENT_HOST://192.168.33.10:9094
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,EXTERNAL_SAME_HOST:PLAINTEXT,EXTERNAL_DIFFERENT_HOST:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=INTERNAL
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper
    healthcheck:
      test: nc -z localhost 9092 || exit -1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10
  
  kconnect:
    build:
      context: ./vehicle-tracker-kafka
      dockerfile: Dockerfile-kconnect
    hostname: kconnect
    container_name: kconnect
    depends_on:
      zookeeper:
        condition: service_started
      kafka:
        condition: service_healthy
    ports:
      - "8083:8083"
    environment:
      - CONNECT_BOOTSTRAP_SERVERS=kafka:9092
      - CONNECT_GROUP_ID=connect-cluster
      - CONNECT_CONFIG_STORAGE_TOPIC=connect-config
      - CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR=1
      - CONNECT_OFFSET_STORAGE_TOPIC=connect-offset
      - CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR=1
      - CONNECT_STATUS_STORAGE_TOPIC=connect-status
      - CONNECT_STATUS_STORAGE_REPLICATION_FACTOR=1
      - CONNECT_KEY_CONVERTER=org.apache.kafka.connect.json.JsonConverter
      - CONNECT_VALUE_CONVERTER=org.apache.kafka.connect.json.JsonConverter
      - CONNECT_REST_ADVERTISED_HOST_NAME=kconnect
      - CONNECT_REST_PORT=8083
      - CONNECT_PLUGIN_PATH=/usr/share/java,/usr/share/confluent-hub-components
    networks:
      - tracker-net

  kconnect-init:
    build:
      context: ./vehicle-tracker-kafka
      dockerfile: Dockerfile-kconnect-init
    container_name: kconnect-init
    depends_on:
      kconnect:
        condition: service_healthy
    networks:
      - tracker-net

  mongo:
    build:
      context: coordinates-db
      dockerfile: Dockerfile 
    container_name: mongo 
    ports:
      - '27017:27017'
    networks: 
      - mongo-net
      - tracker-net
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
    command: mongod --replSet rs0 --bind_ip 0.0.0.0 --keyFile /opt/rs-keyfile
    healthcheck:
      test: mongosh -u root -p root --eval 'print('')' || exit -1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10   

  mongo-init:
    build:
      context: coordinates-db
      dockerfile: Dockerfile
    container_name: mongo-init
    networks:
      - mongo-net
    command: >
      mongosh --host mongo:27017 -u root -p root --eval "
        rs.initiate({
          _id: 'rs0',
          members: [
            {_id:0, host: 'mongo'},
          ]
        });
          
        while (rs.status().ok == 0) sleep(1000);
       " 
    depends_on:
      mongo:
        condition: service_healthy 

networks:
    tracker-net:
      attachable: true
      driver: bridge
    mongo-net:
      driver: bridge
